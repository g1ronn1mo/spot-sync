"""
Cookie extractor for YouTube Music
Extracts cookies from installed browsers automatically
"""

import browser_cookie3
import tempfile
import os
from pathlib import Path

class CookieExtractor:
    """Extract YouTube Music cookies from browsers"""
    
    SUPPORTED_BROWSERS = {
        'chrome': 'Google Chrome',
        'firefox': 'Mozilla Firefox',
        'edge': 'Microsoft Edge',
        'opera': 'Opera',
        'brave': 'Brave',
        'chromium': 'Chromium'
    }
    
    @staticmethod
    def get_available_browsers():
        """Get list of available browsers on the system"""
        available = []
        
        # On Windows, check common browser locations
        if os.name == 'nt':
            browser_paths = {
                'chrome': [
                    os.path.expandvars(r'%PROGRAMFILES%\Google\Chrome\Application\chrome.exe'),
                    os.path.expandvars(r'%PROGRAMFILES(X86)%\Google\Chrome\Application\chrome.exe'),
                    os.path.expandvars(r'%LOCALAPPDATA%\Google\Chrome\Application\chrome.exe'),
                ],
                'firefox': [
                    os.path.expandvars(r'%PROGRAMFILES%\Mozilla Firefox\firefox.exe'),
                    os.path.expandvars(r'%PROGRAMFILES(X86)%\Mozilla Firefox\firefox.exe'),
                ],
                'edge': [
                    os.path.expandvars(r'%PROGRAMFILES(X86)%\Microsoft\Edge\Application\msedge.exe'),
                    os.path.expandvars(r'%PROGRAMFILES%\Microsoft\Edge\Application\msedge.exe'),
                ],
                'brave': [
                    os.path.expandvars(r'%PROGRAMFILES%\BraveSoftware\Brave-Browser\Application\brave.exe'),
                    os.path.expandvars(r'%PROGRAMFILES(X86)%\BraveSoftware\Brave-Browser\Application\brave.exe'),
                    os.path.expandvars(r'%LOCALAPPDATA%\BraveSoftware\Brave-Browser\Application\brave.exe'),
                ],
                'opera': [
                    os.path.expandvars(r'%LOCALAPPDATA%\Programs\Opera\launcher.exe'),
                    os.path.expandvars(r'%PROGRAMFILES%\Opera\launcher.exe'),
                    os.path.expandvars(r'%PROGRAMFILES(X86)%\Opera\launcher.exe'),
                ]
            }
            
            for browser_key, paths in browser_paths.items():
                for path in paths:
                    if os.path.exists(path):
                        if browser_key in CookieExtractor.SUPPORTED_BROWSERS:
                            available.append((browser_key, CookieExtractor.SUPPORTED_BROWSERS[browser_key]))
                            break
                            
        else:
            # For non-Windows, do a quick check for browser functions
            for browser_key, browser_name in CookieExtractor.SUPPORTED_BROWSERS.items():
                try:
                    browser_func = getattr(browser_cookie3, browser_key, None)
                    if browser_func and callable(browser_func):
                        available.append((browser_key, browser_name))
                except:
                    pass
                    
        return available
    
    @staticmethod
    def extract_youtube_cookies(browser_key):
        """Extract YouTube Music cookies from specified browser"""
        try:
            # Get the browser cookie function
            browser_func = getattr(browser_cookie3, browser_key)
            
            # Get cookies for YouTube Music
            cookies = browser_func(domain_name='youtube.com')
            
            # Filter for important YouTube cookies
            youtube_cookies = []
            important_cookies = ['SID', 'HSID', 'SSID', 'APISID', 'SAPISID', 
                               'LOGIN_INFO', '__Secure-1PSID', '__Secure-3PSID',
                               '__Secure-1PAPISID', '__Secure-3PAPISID']
            
            for cookie in cookies:
                if cookie.name in important_cookies or cookie.name.startswith('YSC'):
                    youtube_cookies.append(cookie)
            
            if not youtube_cookies:
                return None, "No YouTube Music cookies found. Please log in to YouTube Music in your browser first."
            
            # Create a temporary cookies file
            temp_file = tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False)
            
            # Write cookies in Netscape format
            temp_file.write("# Netscape HTTP Cookie File\n")
            temp_file.write("# This file was generated by Spoti-Sync\n")
            temp_file.write("# https://curl.haxx.se/docs/http-cookies.html\n\n")
            
            for cookie in youtube_cookies:
                # Format: domain, include_subdomains, path, secure, expiry, name, value
                domain = cookie.domain
                include_subdomains = "TRUE" if domain.startswith('.') else "FALSE"
                path = cookie.path
                secure = "TRUE" if cookie.secure else "FALSE"
                expiry = str(int(cookie.expires)) if cookie.expires else "0"
                name = cookie.name
                value = cookie.value
                
                line = f"{domain}\t{include_subdomains}\t{path}\t{secure}\t{expiry}\t{name}\t{value}\n"
                temp_file.write(line)
            
            temp_file.close()
            
            # Save to a permanent location
            app_data = Path.home() / '.spotisync'
            app_data.mkdir(exist_ok=True)
            permanent_file = app_data / 'youtube_cookies.txt'
            
            # Copy temp file to permanent location
            with open(temp_file.name, 'r') as src:
                with open(permanent_file, 'w') as dst:
                    dst.write(src.read())
            
            # Clean up temp file
            os.unlink(temp_file.name)
            
            return str(permanent_file), None
            
        except PermissionError as e:
            # Provide helpful message for permission errors
            return None, (
                "Cannot access browser cookies. This might be because:\n\n"
                f"1. {CookieExtractor.SUPPORTED_BROWSERS[browser_key]} is currently running. "
                "Please close it and try again.\n\n"
                "2. Your browser profile is protected.\n\n"
                "Alternative: Use a browser extension like 'Get cookies.txt' to manually export cookies."
            )
        except Exception as e:
            error_msg = str(e)
            if "admin" in error_msg.lower() or "permission" in error_msg.lower():
                return None, (
                    "Cannot access browser cookies without admin rights.\n\n"
                    "Alternative solutions:\n"
                    "1. Use a browser extension like 'Get cookies.txt' to export cookies\n"
                    "2. Close your browser completely and try again\n"
                    "3. Use the manual 'Browse' option to select an existing cookies file"
                )
            return None, f"Error extracting cookies: {error_msg}"
    
    @staticmethod
    def verify_youtube_login(cookies_file):
        """Verify if the cookies file contains valid YouTube login"""
        try:
            with open(cookies_file, 'r') as f:
                content = f.read()
                # Check for essential YouTube auth cookies
                has_auth = any(cookie in content for cookie in ['__Secure-1PSID', '__Secure-3PSID', 'SAPISID'])
                return has_auth
        except:
            return False 